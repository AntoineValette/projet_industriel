name: smartETL

services:
  postgres:
    image: postgres:17.2
    container_name: dor_postgres
    env_file:
      - .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin", "-d", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      dor_network:
        aliases:
          - dor_network

  pgadmin:
    image: dpage/pgadmin4:8.14.0
    container_name: dor_pgadmin
    env_file:
      - .env
    ports:
      - "5050:80"
    depends_on:
      postgres:
          condition: service_healthy
    volumes:
      - ./conf/postgresql/servers.json:/pgadmin4/servers.json
    networks:
      dor_network:
        aliases:
          - dor_network

  python_app:
    container_name: dor_scripts
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
          condition: service_healthy
    volumes:
      - ./data:/data
      - shared-data:/shared
    entrypoint: ["python", "smartETL.py"]
    networks:
      dor_network:
        aliases:
          - dor_network

  # Kafka Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: dor_zookeeper
    env_file:
      - .env
    networks:
      dor_network:
        aliases:
          - dor_network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.9.0
    container_name: dor_kafka
    env_file:
      - .env
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      dor_network:
        aliases:
          - dor_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python Producer
  producer:
    build:
      dockerfile: docker/kafka/Dockerfile
      context: .
    container_name: dor_kafka_producer
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./data:/data
    entrypoint: ["python", "producer.py"]
    networks:
      dor_network:
        aliases:
          - dor_network


  # Python Consumer (for consuming Kafka messages and inserting into PostgreSQL)
  consumer:
    build:
      dockerfile: docker/kafka/Dockerfile
      context: .
    container_name: dor_kafka_consumer
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    entrypoint: ["python", "consumer.py"]
    env_file:
      - .env
    volumes:
      - shared-data:/shared
    networks:
      dor_network:
        aliases:
          - dor_network

  kafka-manager:
    image: hlebalbau/kafka-manager:3.0.0.5
    container_name: dor_kafka_manager
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: "zookeeper:2181"
      APPLICATION_SECRET: "randomsecret"
    depends_on:
      - zookeeper
      - kafka
    networks:
      dor_network:
        aliases:
          - dor_network

  grafana:
    image: grafana/grafana:11.5.1
    container_name: dor_grafana
    ports:
      - "3000:3000"
    env_file:
      - .env
    volumes:
      - grafana-data:/var/lib/grafana
      - ./conf/grafana/provisioning:/etc/grafana/provisioning
      - ./conf/grafana/dashboards:/import
    depends_on:
      postgres:
          condition: service_healthy
    networks:
      dor_network:
        aliases:
          - dor_network

  airflow:
    build:
      context: .
      dockerfile: docker/airflow/Dockerfile
    container_name: dor_airflow
    command: ["/bin/bash", "-c", "export START_DATE=$(date -u '+%Y-%m-%dT%H:00:00') && airflow standalone"]
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - TZ=Europe/Paris
      - START_DATE=${START_DATE:-}
    volumes:
        - ./python/dags:/opt/airflow/dags
        - logs_data:/opt/airflow/logs
        - ./conf/airflow/plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    networks:
      dor_network:
        aliases:
          - dor_network

volumes:
  postgres-data:
  grafana-data:
  logs_data:
  shared-data:

networks:
  dor_network:
